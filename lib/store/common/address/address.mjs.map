{"version":3,"sources":["../../../../src/store/common/address/address.ts"],"names":["gql","state","address","entities","getters","get","list","mutations","setAddress","payload","setEntities","actions","create","commit","dispatch","rootGetters","mutation","variables","root","accountAddAddress","edit","id","accountEditAddress","remove","accountRemoveAddress"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAQA,OAAO,MAAMC,KAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,EADiB;AAE1BC,EAAAA,QAAQ,EAAE;AAFgB,CAArB;AAKP,OAAO,MAAMC,OAAqC,GAAG;AACnDC,EAAAA,GAAG,CAACJ,KAAD,EAAQ;AACT,WAAOA,KAAK,CAACC,OAAb;AACD,GAHkD;;AAInDI,EAAAA,IAAI,CAACL,KAAD,EAAQ;AACV,WAAOA,KAAK,CAACE,QAAb;AACD;;AANkD,CAA9C;AASP,OAAO,MAAMI,SAA8B,GAAG;AAC5CC,EAAAA,UAAU,CAACP,KAAD,EAAQQ,OAAR,EAAiB;AACzBR,IAAAA,KAAK,CAACC,OAAN,GAAgBO,OAAhB;AACD,GAH2C;;AAI5CC,EAAAA,WAAW,CAACT,KAAD,EAAQQ,OAAR,EAAiB;AAC1BR,IAAAA,KAAK,CAACE,QAAN,GAAiBM,OAAjB;AACD;;AAN2C,CAAvC;AASP,OAAO,MAAME,OAAqC,GAAG;AACnD,QAAMC,MAAN,CAAa;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAAb,EAAgD;AAAEb,IAAAA;AAAF,GAAhD,EAA6D;AAC3D,UAAMY,QAAQ,CACZ,eADY,EAEZ;AACEE,MAAAA,QAAQ,EAAEhB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAfM;AAgBEiB,MAAAA,SAAS,EAAE;AACTf,QAAAA;AADS;AAhBb,KAFY,EAsBZ;AACEgB,MAAAA,IAAI,EAAE;AADR,KAtBY,CAAd;;AA2BA,QAAI,CAACH,WAAW,CAAC,gBAAD,CAAhB,EAAoC;AAClCF,MAAAA,MAAM,CAAC,YAAD,EAAeE,WAAW,CAAC,YAAD,CAAX,CAA0BI,iBAAzC,CAAN;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GApCkD;;AAqCnD,QAAMC,IAAN,CAAW;AAAEP,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAAX,EAA8C;AAAEM,IAAAA,EAAF;AAAMnB,IAAAA;AAAN,GAA9C,EAA+D;AAC7D,UAAMY,QAAQ,CACZ,eADY,EAEZ;AACEE,MAAAA,QAAQ,EAAEhB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAfM;AAgBEiB,MAAAA,SAAS,EAAE;AACTI,QAAAA,EADS;AAETnB,QAAAA;AAFS;AAhBb,KAFY,EAuBZ;AACEgB,MAAAA,IAAI,EAAE;AADR,KAvBY,CAAd;;AA4BA,QAAI,CAACH,WAAW,CAAC,gBAAD,CAAhB,EAAoC;AAClCF,MAAAA,MAAM,CAAC,YAAD,EAAeE,WAAW,CAAC,YAAD,CAAX,CAA0BO,kBAAzC,CAAN;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAzEkD;;AA0EnD,QAAMC,MAAN,CAAa;AAAEV,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAAb,EAAgD;AAAEM,IAAAA;AAAF,GAAhD,EAAwD;AACtD,UAAMP,QAAQ,CACZ,eADY,EAEZ;AACEE,MAAAA,QAAQ,EAAEhB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAxBM;AAyBEiB,MAAAA,SAAS,EAAE;AACTI,QAAAA;AADS;AAzBb,KAFY,EA+BZ;AACEH,MAAAA,IAAI,EAAE;AADR,KA/BY,CAAd;;AAoCA,QAAI,CAACH,WAAW,CAAC,gBAAD,CAAhB,EAAoC;AAClCF,MAAAA,MAAM,CAAC,aAAD,EAAgBE,WAAW,CAAC,YAAD,CAAX,CAA0BS,oBAA1C,CAAN;AACD;AACF;;AAlHkD,CAA9C","sourcesContent":["import gql from \"graphql-tag\";\nimport { MutationTree, GetterTree, ActionTree } from \"vuex\";\nimport { AccountAddress } from \"vuefront-api\";\nimport { RootState } from \"vuefront-store\";\nexport type State = {\n  address: AccountAddress;\n  entities: AccountAddress[];\n};\nexport const state: State = {\n  address: {},\n  entities: [],\n};\n\nexport const getters: GetterTree<State, RootState> = {\n  get(state) {\n    return state.address;\n  },\n  list(state) {\n    return state.entities;\n  },\n};\n\nexport const mutations: MutationTree<State> = {\n  setAddress(state, payload) {\n    state.address = payload;\n  },\n  setEntities(state, payload) {\n    state.entities = payload;\n  },\n};\n\nexport const actions: ActionTree<State, RootState> = {\n  async create({ commit, dispatch, rootGetters }, { address }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($address: AccountAddressInput) {\n            accountAddAddress(address: $address) {\n              id\n              firstName\n              lastName\n              city\n              company\n              zipcode\n              countryId\n              address1\n              address2\n            }\n          }\n        `,\n        variables: {\n          address,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setAddress\", rootGetters[\"apollo/get\"].accountAddAddress);\n\n      return true;\n    }\n\n    return false;\n  },\n  async edit({ commit, dispatch, rootGetters }, { id, address }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($id: String, $address: AccountAddressInput) {\n            accountEditAddress(id: $id, address: $address) {\n              id\n              firstName\n              lastName\n              city\n              company\n              zipcode\n              address1\n              countryId\n              address2\n            }\n          }\n        `,\n        variables: {\n          id,\n          address,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setAddress\", rootGetters[\"apollo/get\"].accountEditAddress);\n\n      return true;\n    }\n\n    return false;\n  },\n  async remove({ commit, dispatch, rootGetters }, { id }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($id: String) {\n            accountRemoveAddress(id: $id, page: 1, size: -1) {\n              id\n              firstName\n              lastName\n              address1\n              address2\n              zoneId\n              zone {\n                id\n                name\n              }\n              countryId\n              country {\n                id\n                name\n              }\n              city\n              company\n              zipcode\n            }\n          }\n        `,\n        variables: {\n          id,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setEntities\", rootGetters[\"apollo/get\"].accountRemoveAddress);\n    }\n  },\n};\n"],"file":"address.mjs"}