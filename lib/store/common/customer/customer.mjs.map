{"version":3,"sources":["../../../../src/store/common/customer/customer.ts"],"names":["gql","state","customer","auth","token","getters","get","mutations","setCustomer","payload","setAuth","setToken","actions","login","customerData","commit","dispatch","rootGetters","mutation","variables","root","accountLogin","$cookies","set","logout","remove","accountLogout","status","edit","accountEdit","editPassword","password","accountEditPassword","register","accountRegister","checkLogged","data","$vfapollo","query","accountCheckLogged","e"],"mappings":"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","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\nimport { RootState } from \"vuefront-store\";\nimport { Customer } from \"vuefront-api\";\nimport gql from \"graphql-tag\";\nexport type State = {\n  customer: Customer;\n  auth: boolean;\n  token: string | boolean;\n};\nexport const state: State = {\n  customer: {},\n  auth: false,\n  token: false,\n};\n\nexport const getters: GetterTree<State, RootState> = {\n  get(state) {\n    return state.customer;\n  },\n  auth(state) {\n    return state.auth;\n  },\n  token(state) {\n    return state.token;\n  },\n};\n\nexport const mutations: MutationTree<State> = {\n  setCustomer(state, payload) {\n    state.customer = payload;\n  },\n  setAuth(state, payload) {\n    state.auth = payload;\n  },\n  setToken(state, payload) {\n    state.token = payload;\n  },\n};\n\nexport const actions: ActionTree<State, RootState> = {\n  async login({ commit, dispatch, rootGetters }, customerData) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($email: String, $password: String) {\n            accountLogin(email: $email, password: $password) {\n              token\n              customer {\n                id\n                firstName\n                lastName\n                email\n              }\n            }\n          }\n        `,\n        variables: customerData,\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      const { accountLogin } = rootGetters[\"apollo/get\"];\n      commit(\"setCustomer\", accountLogin.customer);\n      commit(\"setToken\", accountLogin.token);\n      this.$cookies.set(\"token\", accountLogin.token);\n      commit(\"setAuth\", true);\n      return true;\n    }\n\n    return false;\n  },\n  async logout({ commit, dispatch, rootGetters }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation {\n            accountLogout {\n              status\n            }\n          }\n        `,\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCustomer\", {});\n      commit(\"setToken\", null);\n      this.$cookies.remove(\"token\");\n      commit(\"setAuth\", rootGetters[\"apollo/get\"].accountLogout.status);\n    }\n  },\n  async edit({ commit, dispatch, rootGetters }, customerData) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($customer: CustomerInput) {\n            accountEdit(customer: $customer) {\n              id\n              firstName\n              lastName\n              email\n            }\n          }\n        `,\n        variables: {\n          customer: customerData,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCustomer\", rootGetters[\"apollo/get\"].accountEdit);\n\n      return true;\n    }\n\n    return false;\n  },\n  async editPassword({ commit, dispatch, rootGetters }, { password }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($password: String) {\n            accountEditPassword(password: $password) {\n              id\n              firstName\n              lastName\n              email\n            }\n          }\n        `,\n        variables: {\n          password,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCustomer\", rootGetters[\"apollo/get\"].accountEditPassword);\n      return true;\n    }\n\n    return false;\n  },\n  async register({ commit, dispatch, rootGetters }, customerData) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($customer: CustomerInput) {\n            accountRegister(customer: $customer) {\n              id\n              firstName\n              lastName\n              email\n            }\n          }\n        `,\n        variables: {\n          customer: customerData,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCustomer\", rootGetters[\"apollo/get\"].accountRegister);\n      return true;\n    }\n\n    return false;\n  },\n  async checkLogged({ commit }) {\n    try {\n      const { data } = await this.$vfapollo.query({\n        query: gql`\n          {\n            accountCheckLogged {\n              status\n              customer {\n                id\n                lastName\n                firstName\n                email\n              }\n            }\n          }\n        `,\n      });\n      if (data.accountCheckLogged && data.accountCheckLogged.customer) {\n        commit(\"setCustomer\", data.accountCheckLogged.customer);\n\n        commit(\"setAuth\", data.accountCheckLogged.status);\n\n        // if (!rootGetters[\"apollo/get\"].accountCheckLogged.status) {\n        //   commit(\"setToken\", null);\n        // }\n      }\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n};\n"],"file":"customer.mjs"}