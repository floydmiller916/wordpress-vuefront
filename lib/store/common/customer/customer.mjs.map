{"version":3,"sources":["../../../../src/store/common/customer/customer.ts"],"names":["gql","state","customer","auth","token","getters","get","mutations","setCustomer","payload","setAuth","setToken","actions","login","customerData","commit","dispatch","rootGetters","mutation","variables","root","accountLogin","$cookies","set","logout","remove","accountLogout","status","edit","accountEdit","editPassword","password","accountEditPassword","register","accountRegister","checkLogged","data","$vfapollo","query","accountCheckLogged","e"],"mappings":"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","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\r\nimport { RootState } from \"vuefront-store\";\r\nimport { Customer } from \"vuefront-api\";\r\nimport gql from \"graphql-tag\";\r\nexport type State = {\r\n  customer: Customer;\r\n  auth: boolean;\r\n  token: string | boolean;\r\n};\r\nexport const state: State = {\r\n  customer: {},\r\n  auth: false,\r\n  token: false,\r\n};\r\n\r\nexport const getters: GetterTree<State, RootState> = {\r\n  get(state) {\r\n    return state.customer;\r\n  },\r\n  auth(state) {\r\n    return state.auth;\r\n  },\r\n  token(state) {\r\n    return state.token;\r\n  },\r\n};\r\n\r\nexport const mutations: MutationTree<State> = {\r\n  setCustomer(state, payload) {\r\n    state.customer = payload;\r\n  },\r\n  setAuth(state, payload) {\r\n    state.auth = payload;\r\n  },\r\n  setToken(state, payload) {\r\n    state.token = payload;\r\n  },\r\n};\r\n\r\nexport const actions: ActionTree<State, RootState> = {\r\n  async login({ commit, dispatch, rootGetters }, customerData) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($email: String, $password: String) {\r\n            accountLogin(email: $email, password: $password) {\r\n              token\r\n              customer {\r\n                id\r\n                firstName\r\n                lastName\r\n                email\r\n                phone\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: customerData,\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      const { accountLogin } = rootGetters[\"apollo/get\"];\r\n      commit(\"setCustomer\", accountLogin.customer);\r\n      commit(\"setToken\", accountLogin.token);\r\n      this.$cookies.set(\"token\", accountLogin.token);\r\n      commit(\"setAuth\", true);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  async logout({ commit, dispatch, rootGetters }) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation {\r\n            accountLogout {\r\n              status\r\n            }\r\n          }\r\n        `,\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCustomer\", {});\r\n      commit(\"setToken\", null);\r\n      this.$cookies.remove(\"token\");\r\n      commit(\"setAuth\", rootGetters[\"apollo/get\"].accountLogout.status);\r\n    }\r\n  },\r\n  async edit({ commit, dispatch, rootGetters }, customerData) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($customer: CustomerInput) {\r\n            accountEdit(customer: $customer) {\r\n              id\r\n              firstName\r\n              lastName\r\n              email\r\n              phone\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          customer: customerData,\r\n        },\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCustomer\", rootGetters[\"apollo/get\"].accountEdit);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  async editPassword({ commit, dispatch, rootGetters }, { password }) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($password: String) {\r\n            accountEditPassword(password: $password) {\r\n              id\r\n              firstName\r\n              lastName\r\n              email\r\n              phone\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          password,\r\n        },\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCustomer\", rootGetters[\"apollo/get\"].accountEditPassword);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  async register({ commit, dispatch, rootGetters }, customerData) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($customer: CustomerInput) {\r\n            accountRegister(customer: $customer) {\r\n              id\r\n              firstName\r\n              lastName\r\n              email\r\n              phone\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          customer: customerData,\r\n        },\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCustomer\", rootGetters[\"apollo/get\"].accountRegister);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  async checkLogged({ commit }) {\r\n    try {\r\n      const { data } = await this.$vfapollo.query({\r\n        query: gql`\r\n          {\r\n            accountCheckLogged {\r\n              status\r\n              customer {\r\n                id\r\n                lastName\r\n                firstName\r\n                email\r\n                phone\r\n              }\r\n            }\r\n          }\r\n        `,\r\n      });\r\n      if (data.accountCheckLogged && data.accountCheckLogged.customer) {\r\n        commit(\"setCustomer\", data.accountCheckLogged.customer);\r\n\r\n        commit(\"setAuth\", data.accountCheckLogged.status);\r\n\r\n        // if (!rootGetters[\"apollo/get\"].accountCheckLogged.status) {\r\n        //   commit(\"setToken\", null);\r\n        // }\r\n      }\r\n    } catch (e) {\r\n      commit(\"vuefront/setResponseError\", e, {\r\n        root: true,\r\n      });\r\n    }\r\n  },\r\n};\r\n"],"file":"customer.mjs"}