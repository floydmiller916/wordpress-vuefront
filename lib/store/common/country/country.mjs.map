{"version":3,"sources":["../../../../src/store/common/country/country.ts"],"names":["gql","state","country","entities","getters","get","list","mutations","setCountry","payload","setEntities","actions","commit","page","size","data","$vfapollo","query","variables","countriesList","e","root","dispatch","rootGetters","id"],"mappings":"AAGA,OAAOA,GAAP,MAAgB,aAAhB;AAKA,OAAO,MAAMC,KAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,EADiB;AAE1BC,EAAAA,QAAQ,EAAE;AAFgB,CAArB;AAKP,OAAO,MAAMC,OAAqC,GAAG;AACnDC,EAAAA,GAAG,CAACJ,KAAD,EAAQ;AACT,WAAOA,KAAK,CAACC,OAAb;AACD,GAHkD;;AAInDI,EAAAA,IAAI,CAACL,KAAD,EAAQ;AACV,WAAOA,KAAK,CAACE,QAAb;AACD;;AANkD,CAA9C;AASP,OAAO,MAAMI,SAA8B,GAAG;AAC5CC,EAAAA,UAAU,CAACP,KAAD,EAAQQ,OAAR,EAAiB;AACzBR,IAAAA,KAAK,CAACC,OAAN,GAAgBO,OAAhB;AACD,GAH2C;;AAI5CC,EAAAA,WAAW,CAACT,KAAD,EAAQQ,OAAR,EAAiB;AAC1BR,IAAAA,KAAK,CAACE,QAAN,GAAiBM,OAAjB;AACD;;AAN2C,CAAvC;AASP,OAAO,MAAME,OAAqC,GAAG;AACnD,QAAML,IAAN,cAAuC;AAAA,QAA5B;AAAEM,MAAAA;AAAF,KAA4B;AAAA,QAAhB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAgB;;AACrC,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAM,KAAKC,SAAL,CAAeC,KAAf,CAAqB;AAC1CA,QAAAA,KAAK,EAAEjB,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAhBkD;AAiB1CkB,QAAAA,SAAS,EAAE;AAAEL,UAAAA,IAAF;AAAQC,UAAAA;AAAR;AAjB+B,OAArB,CAAvB;AAmBAF,MAAAA,MAAM,CAAC,aAAD,EAAgBG,IAAI,CAACI,aAArB,CAAN;AACD,KArBD,CAqBE,OAAOC,CAAP,EAAU;AACVR,MAAAA,MAAM,CAAC,2BAAD,EAA8BQ,CAA9B,EAAiC;AACrCC,QAAAA,IAAI,EAAE;AAD+B,OAAjC,CAAN;AAGD;AACF,GA5BkD;;AA6BnD,QAAMhB,GAAN,eAAqD;AAAA,QAA3C;AAAEO,MAAAA,MAAF;AAAUU,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,KAA2C;AAAA,QAAR;AAAEC,MAAAA;AAAF,KAAQ;;AACnD,QAAI;AACF,YAAM;AAAET,QAAAA;AAAF,UAAW,MAAM,KAAKC,SAAL,CAAeC,KAAf,CAAqB;AAC1CA,QAAAA,KAAK,EAAEjB,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,SARkD;AAS1CkB,QAAAA,SAAS,EAAE;AAAEM,UAAAA;AAAF;AAT+B,OAArB,CAAvB;AAWAZ,MAAAA,MAAM,CAAC,YAAD,EAAeG,IAAI,CAACb,OAApB,CAAN;AACD,KAbD,CAaE,OAAOkB,CAAP,EAAU;AACVR,MAAAA,MAAM,CAAC,2BAAD,EAA8BQ,CAA9B,EAAiC;AACrCC,QAAAA,IAAI,EAAE;AAD+B,OAAjC,CAAN;AAGD;AACF;;AAhDkD,CAA9C","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\nimport { RootState } from \"vuefront-store\";\nimport { Country, CountriesResult } from \"vuefront-api\";\nimport gql from \"graphql-tag\";\nexport type State = {\n  country: Country;\n  entities: CountriesResult;\n};\nexport const state: State = {\n  country: {},\n  entities: {},\n};\n\nexport const getters: GetterTree<State, RootState> = {\n  get(state) {\n    return state.country;\n  },\n  list(state) {\n    return state.entities;\n  },\n};\n\nexport const mutations: MutationTree<State> = {\n  setCountry(state, payload) {\n    state.country = payload;\n  },\n  setEntities(state, payload) {\n    state.entities = payload;\n  },\n};\n\nexport const actions: ActionTree<State, RootState> = {\n  async list({ commit }, { page, size }) {\n    try {\n      const { data } = await this.$vfapollo.query({\n        query: gql`\n          query ($page: Int, $size: Int) {\n            countriesList(page: $page, size: $size) {\n              content {\n                id\n                name\n              }\n              totalPages\n              totalElements\n              first\n              last\n              number\n              numberOfElements\n            }\n          }\n        `,\n        variables: { page, size },\n      });\n      commit(\"setEntities\", data.countriesList);\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n  async get({ commit, dispatch, rootGetters }, { id }) {\n    try {\n      const { data } = await this.$vfapollo.query({\n        query: gql`\n          query ($id: String) {\n            country(id: $id) {\n              id\n              name\n            }\n          }\n        `,\n        variables: { id },\n      });\n      commit(\"setCountry\", data.country);\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n};\n"],"file":"country.mjs"}