{"version":3,"sources":["../../../../src/store/common/apollo/apollo.ts"],"names":["omitDeepLodash","axios","adapterAxios","state","data","prefetchData","getters","get","mutations","setData","payload","setPrefetchData","key","actions","query","options","commit","variables","res","$vfapollo","root","e","mutate","errors","clearStore","upload","o","mutation","loc","source","body","map","i","fd","FormData","append","JSON","stringify","File","toString","create","withCredentials","post","$vuefront","baseURL"],"mappings":"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","sourcesContent":["import omitDeepLodash from \"omit-deep-lodash\";\n//@ts-ignore\nimport { axios as adapterAxios } from \"@bundled-es-modules/axios\";\nimport { MutationTree, GetterTree, ActionTree } from \"vuex\";\nimport {} from \"vuefront-api\";\nimport { RootState } from \"vuefront-store\";\nexport type State = {\n  data: any;\n  prefetchData: { [key: string]: any };\n};\nexport const state: State = {\n  data: {},\n  prefetchData: {},\n};\n\nexport const getters: GetterTree<State, RootState> = {\n  get(state) {\n    return state.data;\n  },\n  prefetchData(state) {\n    return state.prefetchData;\n  },\n};\n\nexport const mutations: MutationTree<State> = {\n  setData(state, payload) {\n    state.data = { ...state.data, ...payload.data };\n  },\n  setPrefetchData(state, { key, data }) {\n    state.prefetchData[key] = data;\n  },\n};\n\nexport const actions: ActionTree<State, RootState> = {\n  async query({ commit }, options) {\n    try {\n      const variables = omitDeepLodash(options.variables, \"__typename\");\n      let res = await this.$vfapollo.query({ ...options, variables });\n\n      res = omitDeepLodash(res, \"__typename\");\n      commit(\"vuefront/setError\", false, { root: true });\n      commit(\"setData\", res);\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n  async mutate({ commit }, options) {\n    try {\n      const variables = omitDeepLodash(options.variables, \"__typename\");\n      const res = await this.$vfapollo.mutate({\n        ...options,\n        variables,\n      });\n      if (!res.errors) {\n        commit(\"vuefront/setError\", false, { root: true });\n        commit(\"setData\", res);\n      } else {\n        commit(\"vuefront/setError\", res.errors, {\n          root: true,\n        });\n      }\n      this.$vfapollo.clearStore();\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n  async upload(\n    { commit },\n    options: { variables: { [key: string]: any }; mutation: any }\n  ) {\n    try {\n      const variables: { [key: string]: any } = omitDeepLodash(\n        options.variables,\n        \"__typename\"\n      );\n\n      const o = {\n        query: options.mutation.loc.source.body,\n        variables,\n      };\n\n      const map: { [key: number]: string } = {\n        0: \"file\",\n      };\n\n      let i: number = 0;\n      const fd = new FormData();\n      fd.append(\"operations\", JSON.stringify(o));\n      for (const key in variables) {\n        if (\n          typeof variables[key] === \"object\" &&\n          variables[key] instanceof File\n        ) {\n          map[i] = key;\n          fd.append(i.toString(), variables[key]);\n          i++;\n        }\n      }\n\n      fd.append(\"map\", JSON.stringify(map));\n      const axios = adapterAxios.create({\n        withCredentials: true,\n      });\n      const { data } = await axios.post(this.$vuefront.baseURL, fd);\n\n      if (!data.errors) {\n        commit(\"vuefront/setError\", false, { root: true });\n        commit(\"setData\", data);\n      } else {\n        commit(\"vuefront/setError\", data.errors, {\n          root: true,\n        });\n      }\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n};\n"],"file":"apollo.mjs"}