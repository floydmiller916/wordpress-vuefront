{"version":3,"sources":["../../../../src/store/store/product/product.ts"],"names":["gql","state","entities","product","options","getters","list","get","mutations","setEntities","products","setProduct","setOptions","actions","addReview","commit","dispatch","rootGetters","reviewData","mutation","variables","root"],"mappings":"AAGA,OAAOA,GAAP,MAAgB,aAAhB;AAQA,OAAO,MAAMC,KAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,OAAO,EAAE,EAFiB;AAG1BC,EAAAA,OAAO,EAAE;AAHiB,CAArB;AAMP,OAAO,MAAMC,OAAqC,GAAG;AACnDC,EAAAA,IAAI,CAACL,KAAD,EAAQ;AACV,WAAOA,KAAK,CAACC,QAAb;AACD,GAHkD;;AAInDK,EAAAA,GAAG,CAACN,KAAD,EAAQ;AACT,WAAOA,KAAK,CAACE,OAAb;AACD,GANkD;;AAOnDC,EAAAA,OAAO,CAACH,KAAD,EAAQ;AACb,WAAOA,KAAK,CAACG,OAAb;AACD;;AATkD,CAA9C;AAYP,OAAO,MAAMI,SAA8B,GAAG;AAC5CC,EAAAA,WAAW,CAACR,KAAD,EAAQS,QAAR,EAAkB;AAC3BT,IAAAA,KAAK,CAACC,QAAN,GAAiBQ,QAAjB;AACD,GAH2C;;AAI5CC,EAAAA,UAAU,CAACV,KAAD,EAAQE,OAAR,EAAiB;AACzBF,IAAAA,KAAK,CAACE,OAAN,GAAgBA,OAAhB;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgB,EAAhB;AACD,GAP2C;;AAQ5CQ,EAAAA,UAAU,CAACX,KAAD,EAAQG,OAAR,EAAiB;AACzBH,IAAAA,KAAK,CAACG,OAAN,GAAgBA,OAAhB;AACD;;AAV2C,CAAvC;AAaP,OAAO,MAAMS,OAAqC,GAAG;AACnD,QAAMC,SAAN,CAAgB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,GAAhB,EAAmDC,UAAnD,EAA+D;AAC7D,UAAMF,QAAQ,CACZ,eADY,EAEZ;AACEG,MAAAA,QAAQ,EAAEnB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAhEM;AAiEEoB,MAAAA,SAAS,EAAEF;AAjEb,KAFY,EAqEZ;AACEG,MAAAA,IAAI,EAAE;AADR,KArEY,CAAd;;AA0EA,QAAI,CAACJ,WAAW,CAAC,gBAAD,CAAhB,EAAoC;AAClCF,MAAAA,MAAM,CAAC,YAAD,EAAeE,WAAW,CAAC,YAAD,CAAX,CAA0BH,SAAzC,CAAN;AACD;AACF;;AA/EkD,CAA9C","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\nimport { RootState } from \"vuefront-store\";\nimport { ProductResult, Product, ProductOption } from \"vuefront-api\";\nimport gql from \"graphql-tag\";\n\nexport type State = {\n  entities: ProductResult;\n  product: Product;\n  options: ProductOption[];\n};\n\nexport const state: State = {\n  entities: {},\n  product: {},\n  options: [],\n};\n\nexport const getters: GetterTree<State, RootState> = {\n  list(state) {\n    return state.entities;\n  },\n  get(state) {\n    return state.product;\n  },\n  options(state) {\n    return state.options;\n  },\n};\n\nexport const mutations: MutationTree<State> = {\n  setEntities(state, products) {\n    state.entities = products;\n  },\n  setProduct(state, product) {\n    state.product = product;\n    state.options = [];\n  },\n  setOptions(state, options) {\n    state.options = options;\n  },\n};\n\nexport const actions: ActionTree<State, RootState> = {\n  async addReview({ commit, dispatch, rootGetters }, reviewData) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation (\n            $id: String\n            $content: String\n            $author: String\n            $rating: Float\n            $limit: Int\n            $productLimit: Int\n          ) {\n            addReview(\n              id: $id\n              content: $content\n              author: $author\n              rating: $rating\n            ) {\n              id\n              name\n              shortDescription\n              description\n              model\n              stock\n              price\n              special\n              image\n              reviews {\n                author\n                author_email\n                content\n                created_at\n                rating\n              }\n              options {\n                id\n                name\n                type\n                values {\n                  id\n                  name\n                }\n              }\n              imageLazy\n              imageBig\n              rating\n              images(limit: $limit) {\n                image\n                imageLazy\n                imageBig\n              }\n              attributes {\n                name\n                options\n              }\n              products(limit: $productLimit) {\n                id\n                image\n                imageLazy\n                description\n                shortDescription\n                price\n                name\n              }\n            }\n          }\n        `,\n        variables: reviewData,\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setProduct\", rootGetters[\"apollo/get\"].addReview);\n    }\n  },\n};\n"],"file":"product.mjs"}