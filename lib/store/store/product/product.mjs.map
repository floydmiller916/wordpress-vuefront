{"version":3,"sources":["../../../../src/store/store/product/product.ts"],"names":["gql","state","entities","product","options","getters","list","get","mutations","setEntities","products","setProduct","setOptions","actions","addReview","reviewData","commit","dispatch","rootGetters","mutation","variables","root"],"mappings":"AAGA,OAAOA,GAAP,MAAgB,aAAhB;AAQA,OAAO,MAAMC,KAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,OAAO,EAAE,EAFiB;AAG1BC,EAAAA,OAAO,EAAE;AAHiB,CAArB;AAMP,OAAO,MAAMC,OAAqC,GAAG;AACnDC,EAAAA,IAAI,CAACL,KAAD,EAAQ;AACV,WAAOA,KAAK,CAACC,QAAb;AACD,GAHkD;;AAInDK,EAAAA,GAAG,CAACN,KAAD,EAAQ;AACT,WAAOA,KAAK,CAACE,OAAb;AACD,GANkD;;AAOnDC,EAAAA,OAAO,CAACH,KAAD,EAAQ;AACb,WAAOA,KAAK,CAACG,OAAb;AACD;;AATkD,CAA9C;AAYP,OAAO,MAAMI,SAA8B,GAAG;AAC5CC,EAAAA,WAAW,CAACR,KAAD,EAAQS,QAAR,EAAkB;AAC3BT,IAAAA,KAAK,CAACC,QAAN,GAAiBQ,QAAjB;AACD,GAH2C;;AAI5CC,EAAAA,UAAU,CAACV,KAAD,EAAQE,OAAR,EAAiB;AACzBF,IAAAA,KAAK,CAACE,OAAN,GAAgBA,OAAhB;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgB,EAAhB;AACD,GAP2C;;AAQ5CQ,EAAAA,UAAU,CAACX,KAAD,EAAQG,OAAR,EAAiB;AACzBH,IAAAA,KAAK,CAACG,OAAN,GAAgBA,OAAhB;AACD;;AAV2C,CAAvC;AAaP,OAAO,MAAMS,OAAqC,GAAG;AACnD,QAAMC,SAAN,OAAmDC,UAAnD,EAA+D;AAAA,QAA/C;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA;AAApB,KAA+C;AAC7D,UAAMD,QAAQ,CACZ,eADY,EAEZ;AACEE,MAAAA,QAAQ,EAAEnB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAhEM;AAiEEoB,MAAAA,SAAS,EAAEL;AAjEb,KAFY,EAqEZ;AACEM,MAAAA,IAAI,EAAE;AADR,KArEY,CAAd;;AA0EA,QAAI,CAACH,WAAW,CAAC,gBAAD,CAAhB,EAAoC;AAClCF,MAAAA,MAAM,CAAC,YAAD,EAAeE,WAAW,CAAC,YAAD,CAAX,CAA0BJ,SAAzC,CAAN;AACD;AACF;;AA/EkD,CAA9C","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\r\nimport { RootState } from \"vuefront-store\";\r\nimport { ProductResult, Product, ProductOption } from \"vuefront-api\";\r\nimport gql from \"graphql-tag\";\r\n\r\nexport type State = {\r\n  entities: ProductResult;\r\n  product: Product;\r\n  options: ProductOption[];\r\n};\r\n\r\nexport const state: State = {\r\n  entities: {},\r\n  product: {},\r\n  options: [],\r\n};\r\n\r\nexport const getters: GetterTree<State, RootState> = {\r\n  list(state) {\r\n    return state.entities;\r\n  },\r\n  get(state) {\r\n    return state.product;\r\n  },\r\n  options(state) {\r\n    return state.options;\r\n  },\r\n};\r\n\r\nexport const mutations: MutationTree<State> = {\r\n  setEntities(state, products) {\r\n    state.entities = products;\r\n  },\r\n  setProduct(state, product) {\r\n    state.product = product;\r\n    state.options = [];\r\n  },\r\n  setOptions(state, options) {\r\n    state.options = options;\r\n  },\r\n};\r\n\r\nexport const actions: ActionTree<State, RootState> = {\r\n  async addReview({ commit, dispatch, rootGetters }, reviewData) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation (\r\n            $id: String\r\n            $content: String\r\n            $author: String\r\n            $rating: Float\r\n            $limit: Int\r\n            $productLimit: Int\r\n          ) {\r\n            addReview(\r\n              id: $id\r\n              content: $content\r\n              author: $author\r\n              rating: $rating\r\n            ) {\r\n              id\r\n              name\r\n              shortDescription\r\n              description\r\n              model\r\n              stock\r\n              price\r\n              special\r\n              image\r\n              reviews {\r\n                author\r\n                author_email\r\n                content\r\n                created_at\r\n                rating\r\n              }\r\n              options {\r\n                id\r\n                name\r\n                type\r\n                values {\r\n                  id\r\n                  name\r\n                }\r\n              }\r\n              imageLazy\r\n              imageBig\r\n              rating\r\n              images(limit: $limit) {\r\n                image\r\n                imageLazy\r\n                imageBig\r\n              }\r\n              attributes {\r\n                name\r\n                options\r\n              }\r\n              products(limit: $productLimit) {\r\n                id\r\n                image\r\n                imageLazy\r\n                description\r\n                shortDescription\r\n                price\r\n                name\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: reviewData,\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setProduct\", rootGetters[\"apollo/get\"].addReview);\r\n    }\r\n  },\r\n};\r\n"],"file":"product.mjs"}