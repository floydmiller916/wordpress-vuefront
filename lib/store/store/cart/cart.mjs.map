{"version":3,"sources":["../../../../src/store/store/cart/cart.ts"],"names":["gql","find","state","cart","products","getters","get","mutations","setCart","actions","add","commit","dispatch","rootGetters","product","quantity","options","redirect","mutation","variables","id","root","addToCart","name","$i18n","global","t","message","$router","push","update","key","updateCart","removeByProductId","productId","o","remove","removeCart","load","data","$vfapollo","query","e"],"mappings":"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","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\nimport { RootState } from \"vuefront-store\";\nimport { Cart } from \"vuefront-api\";\nimport gql from \"graphql-tag\";\nimport { find } from \"lodash\";\n\nexport type State = {\n  cart: Cart;\n};\n\nexport const state: State = {\n  cart: {\n    products: [],\n  },\n};\n\nexport const getters: GetterTree<State, RootState> = {\n  get(state) {\n    return state.cart;\n  },\n};\n\nexport const mutations: MutationTree<State> = {\n  setCart(state, cart) {\n    state.cart = cart;\n  },\n};\n\nexport const actions: ActionTree<State, RootState> = {\n  async add(\n    { commit, dispatch, rootGetters },\n    { product, quantity = 1, options = [], redirect = false }\n  ) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($id: String, $quantity: Int, $options: [CartOption]) {\n            addToCart(id: $id, quantity: $quantity, options: $options) {\n              products {\n                key\n                quantity\n                total\n                option {\n                  name\n                  value\n                  type\n                }\n                product {\n                  id\n                  name\n                  model\n                  price\n                  image\n                  imageLazy\n                  extra {\n                    name\n                    value\n                  }\n                  manufacturer {\n                    id\n                    name\n                    url(url: \"/store/manufacturer/_id\")\n                  }\n                }\n              }\n              total\n            }\n          }\n        `,\n        variables: {\n          id: product.id,\n          quantity,\n          options,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCart\", rootGetters[\"apollo/get\"].addToCart);\n      commit(\n        \"notification/add\",\n        product.name +\n          this.$i18n.global.t(\"elements.store.productThumb.notificationText\"),\n        { root: true }\n      );\n    } else {\n      commit(\"notification/error\", rootGetters[\"vuefront/error\"].message, {\n        root: true,\n      });\n\n      if (redirect) {\n        this.$router.push(\"/store/product/\" + product.id);\n      }\n    }\n  },\n  async update({ commit, dispatch, rootGetters }, { key, quantity }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($key: String, $quantity: Int) {\n            updateCart(key: $key, quantity: $quantity) {\n              products {\n                key\n                quantity\n                total\n                option {\n                  name\n                  value\n                  type\n                }\n                product {\n                  id\n                  name\n                  model\n                  price\n                  image\n                  imageLazy\n                  extra {\n                    name\n                    value\n                  }\n                  manufacturer {\n                    id\n                    name\n                    url(url: \"/store/manufacturer/_id\")\n                  }\n                }\n              }\n              total\n            }\n          }\n        `,\n        variables: {\n          key,\n          quantity,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCart\", rootGetters[\"apollo/get\"].updateCart);\n    }\n  },\n  async removeByProductId({ dispatch, getters }, { productId }) {\n    const product = find(\n      getters.get.products,\n      (o) => o.product.id === productId\n    );\n    if (product) {\n      await dispatch(\"remove\", { key: product.key });\n    }\n  },\n  async remove({ commit, dispatch, rootGetters }, { key }) {\n    await dispatch(\n      \"apollo/mutate\",\n      {\n        mutation: gql`\n          mutation ($key: String) {\n            removeCart(key: $key) {\n              products {\n                key\n                quantity\n                total\n                option {\n                  name\n                  value\n                  type\n                }\n                product {\n                  id\n                  name\n                  model\n                  price\n                  image\n                  imageLazy\n                  extra {\n                    name\n                    value\n                  }\n                  manufacturer {\n                    id\n                    name\n                    url(url: \"/store/manufacturer/_id\")\n                  }\n                }\n              }\n              total\n            }\n          }\n        `,\n        variables: {\n          key,\n        },\n      },\n      {\n        root: true,\n      }\n    );\n\n    if (!rootGetters[\"vuefront/error\"]) {\n      commit(\"setCart\", rootGetters[\"apollo/get\"].removeCart);\n    }\n  },\n  async load({ commit, dispatch, rootGetters }) {\n    try {\n      const { data } = await this.$vfapollo.query({\n        query: gql`\n          {\n            cart {\n              products {\n                key\n                quantity\n                total\n                option {\n                  name\n                  value\n                  type\n                }\n                product {\n                  id\n                  name\n                  model\n                  price\n                  image\n                  imageLazy\n                  extra {\n                    name\n                    value\n                  }\n                  manufacturer {\n                    id\n                    name\n                    url(url: \"/store/manufacturer/_id\")\n                  }\n                }\n              }\n              total\n            }\n          }\n        `,\n      });\n\n      commit(\"setCart\", data.cart);\n    } catch (e) {\n      commit(\"vuefront/setResponseError\", e, {\n        root: true,\n      });\n    }\n  },\n};\n"],"file":"cart.mjs"}