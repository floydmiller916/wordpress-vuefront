{"version":3,"sources":["../../../../src/store/store/cart/cart.ts"],"names":["gql","find","state","cart","products","getters","get","mutations","setCart","actions","add","commit","dispatch","rootGetters","product","quantity","options","redirect","mutation","variables","id","root","addToCart","name","$i18n","global","t","$router","push","update","key","updateCart","removeByProductId","productId","o","remove","removeCart","load","data","$vfapollo","query","e"],"mappings":"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","sourcesContent":["import { MutationTree, GetterTree, ActionTree } from \"vuex\";\r\nimport { RootState } from \"vuefront-store\";\r\nimport { Cart } from \"vuefront-api\";\r\nimport gql from \"graphql-tag\";\r\nimport { find } from \"lodash\";\r\n\r\nexport type State = {\r\n  cart: Cart;\r\n};\r\n\r\nexport const state: State = {\r\n  cart: {\r\n    products: [],\r\n  },\r\n};\r\n\r\nexport const getters: GetterTree<State, RootState> = {\r\n  get(state) {\r\n    return state.cart;\r\n  },\r\n};\r\n\r\nexport const mutations: MutationTree<State> = {\r\n  setCart(state, cart) {\r\n    state.cart = cart;\r\n  },\r\n};\r\n\r\nexport const actions: ActionTree<State, RootState> = {\r\n  async add(\r\n    { commit, dispatch, rootGetters },\r\n    { product, quantity = 1, options = [], redirect = false }\r\n  ) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($id: String, $quantity: Int, $options: [CartOption]) {\r\n            addToCart(id: $id, quantity: $quantity, options: $options) {\r\n              products {\r\n                key\r\n                quantity\r\n                total\r\n                option {\r\n                  name\r\n                  value\r\n                  type\r\n                }\r\n                product {\r\n                  id\r\n                  name\r\n                  model\r\n                  price\r\n                  image\r\n                  imageLazy\r\n                  extra {\r\n                    name\r\n                    value\r\n                  }\r\n                  manufacturer {\r\n                    id\r\n                    name\r\n                    url(url: \"/store/manufacturer/_id\")\r\n                  }\r\n                }\r\n              }\r\n              total\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          id: product.id,\r\n          quantity,\r\n          options,\r\n        },\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCart\", rootGetters[\"apollo/get\"].addToCart);\r\n      commit(\r\n        \"notification/add\",\r\n        product.name +\r\n          this.$i18n.global.t(\"elements.store.productThumb.notificationText\"),\r\n        { root: true }\r\n      );\r\n    } else {\r\n      commit(\"notification/error\", rootGetters[\"vuefront/error\"], {\r\n        root: true,\r\n      });\r\n\r\n      if (redirect) {\r\n        this.$router.push(\"/store/product/\" + product.id);\r\n      }\r\n    }\r\n  },\r\n  async update({ commit, dispatch, rootGetters }, { key, quantity }) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($key: String, $quantity: Int) {\r\n            updateCart(key: $key, quantity: $quantity) {\r\n              products {\r\n                key\r\n                quantity\r\n                total\r\n                option {\r\n                  name\r\n                  value\r\n                  type\r\n                }\r\n                product {\r\n                  id\r\n                  name\r\n                  model\r\n                  price\r\n                  image\r\n                  imageLazy\r\n                  extra {\r\n                    name\r\n                    value\r\n                  }\r\n                  manufacturer {\r\n                    id\r\n                    name\r\n                    url(url: \"/store/manufacturer/_id\")\r\n                  }\r\n                }\r\n              }\r\n              total\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          key,\r\n          quantity,\r\n        },\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCart\", rootGetters[\"apollo/get\"].updateCart);\r\n    }\r\n  },\r\n  async removeByProductId({ dispatch, getters }, { productId }) {\r\n    const product = find(\r\n      getters.get.products,\r\n      (o) => o.product.id === productId\r\n    );\r\n    if (product) {\r\n      await dispatch(\"remove\", { key: product.key });\r\n    }\r\n  },\r\n  async remove({ commit, dispatch, rootGetters }, { key }) {\r\n    await dispatch(\r\n      \"apollo/mutate\",\r\n      {\r\n        mutation: gql`\r\n          mutation ($key: String) {\r\n            removeCart(key: $key) {\r\n              products {\r\n                key\r\n                quantity\r\n                total\r\n                option {\r\n                  name\r\n                  value\r\n                  type\r\n                }\r\n                product {\r\n                  id\r\n                  name\r\n                  model\r\n                  price\r\n                  image\r\n                  imageLazy\r\n                  extra {\r\n                    name\r\n                    value\r\n                  }\r\n                  manufacturer {\r\n                    id\r\n                    name\r\n                    url(url: \"/store/manufacturer/_id\")\r\n                  }\r\n                }\r\n              }\r\n              total\r\n            }\r\n          }\r\n        `,\r\n        variables: {\r\n          key,\r\n        },\r\n      },\r\n      {\r\n        root: true,\r\n      }\r\n    );\r\n\r\n    if (!rootGetters[\"vuefront/error\"]) {\r\n      commit(\"setCart\", rootGetters[\"apollo/get\"].removeCart);\r\n    }\r\n  },\r\n  async load({ commit, dispatch, rootGetters }) {\r\n    try {\r\n      const { data } = await this.$vfapollo.query({\r\n        query: gql`\r\n          {\r\n            cart {\r\n              products {\r\n                key\r\n                quantity\r\n                total\r\n                option {\r\n                  name\r\n                  value\r\n                  type\r\n                }\r\n                product {\r\n                  id\r\n                  name\r\n                  model\r\n                  price\r\n                  image\r\n                  imageLazy\r\n                  extra {\r\n                    name\r\n                    value\r\n                  }\r\n                  manufacturer {\r\n                    id\r\n                    name\r\n                    url(url: \"/store/manufacturer/_id\")\r\n                  }\r\n                }\r\n              }\r\n              total\r\n            }\r\n          }\r\n        `,\r\n      });\r\n\r\n      commit(\"setCart\", data.cart);\r\n    } catch (e) {\r\n      commit(\"vuefront/setResponseError\", e, {\r\n        root: true,\r\n      });\r\n    }\r\n  },\r\n};\r\n"],"file":"cart.mjs"}